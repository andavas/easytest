[{"/home/andavas/easytest/src/index.js":"1","/home/andavas/easytest/src/App.js":"2","/home/andavas/easytest/src/reportWebVitals.js":"3","/home/andavas/easytest/src/components/PyComp/index.js":"4"},{"size":268,"mtime":1654558357041,"results":"5","hashOfConfig":"6"},{"size":1688,"mtime":1654823379118,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1653956710327,"results":"8","hashOfConfig":"6"},{"size":878,"mtime":1654822188893,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1ym8ibz",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},"/home/andavas/easytest/src/index.js",["21"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["22","23"],"/home/andavas/easytest/src/App.js",["24","25","26","27"],"/home/andavas/easytest/src/reportWebVitals.js",[],"/home/andavas/easytest/src/components/PyComp/index.js",["28","29"],"import React from 'react';\n\nconst PyComp = (props) => {\n  const loadPyodide = async () => {\n    const pyodide = await window.loadPyodide({\n        indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\",\n      });\n    return await pyodide\n  };\n  \n  const [output, setOutput] = React.useState(\"(loading...)\");\n  const [pyodide, setPyodide]= React.useState();\n  \n  React.useEffect(async () => {\n      const script = await (await fetch(props.code)).text();\n      if (!pyodide) {\n        loadPyodide()\n        .then((response) => {\n          setPyodide(response)\n          const out = response.runPython(script);\n          setOutput(out);\n        });\n      }\n      else { // depois da primeira execução o setPyodide já rodou\n        const out = pyodide.runPython(script);\n        setOutput(out);\n      }\n  }, [props.code]);\n\n  return <p>{output}</p>;\n}\n\nexport default PyComp;",{"ruleId":"30","severity":1,"message":"31","line":5,"column":8,"nodeType":"32","messageId":"33","endLine":5,"endColumn":23},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"30","severity":1,"message":"38","line":3,"column":8,"nodeType":"32","messageId":"33","endLine":3,"endColumn":15},{"ruleId":"30","severity":1,"message":"39","line":7,"column":8,"nodeType":"32","messageId":"33","endLine":7,"endColumn":13},{"ruleId":"30","severity":1,"message":"40","line":28,"column":10,"nodeType":"32","messageId":"33","endLine":28,"endColumn":16},{"ruleId":"30","severity":1,"message":"41","line":28,"column":18,"nodeType":"32","messageId":"33","endLine":28,"endColumn":27},{"ruleId":"42","severity":1,"message":"43","line":14,"column":19,"nodeType":"44","endLine":28,"endColumn":4},{"ruleId":"42","severity":1,"message":"45","line":28,"column":6,"nodeType":"46","endLine":28,"endColumn":18,"suggestions":"47"},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["48"],"no-negated-in-lhs",["49"],"'script2' is defined but never used.","'react' is defined but never used.","'reload' is assigned a value but never used.","'setReload' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook React.useEffect has a missing dependency: 'pyodide'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [props.code, pyodide]",{"range":"53","text":"54"},[808,820],"[props.code, pyodide]"]
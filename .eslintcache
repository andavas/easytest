[{"/home/ittv/repos/easytest/src/index.js":"1","/home/ittv/repos/easytest/src/reportWebVitals.js":"2","/home/ittv/repos/easytest/src/App.js":"3","/home/ittv/repos/easytest/src/components/PyComp/index.js":"4"},{"size":268,"mtime":1655248814206,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1655248814206,"results":"7","hashOfConfig":"6"},{"size":2069,"mtime":1655255029938,"results":"8","hashOfConfig":"6"},{"size":879,"mtime":1655254350396,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"10ogxwm",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},"/home/ittv/repos/easytest/src/index.js",["21"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",["22","23"],"/home/ittv/repos/easytest/src/reportWebVitals.js",[],"/home/ittv/repos/easytest/src/App.js",["24","25","26"],"/home/ittv/repos/easytest/src/components/PyComp/index.js",["27","28"],"import React from 'react';\n\nconst PyComp = (props) => {\n  const loadPyodide = async () => {\n    const pyodide = await window.loadPyodide({\n        indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\",\n      });\n    return await pyodide\n  };\n  \n  const [output, setOutput] = React.useState(\"\");\n  const [pyodide, setPyodide]= React.useState();\n  \n  React.useEffect(async () => {\n      const script = props.code; \n      if (!pyodide) {\n        loadPyodide()\n        .then((response) => {\n          setPyodide(response)\n          const out = response.runPython(script);\n          setOutput(out);\n          props.handlePyodideLoad(true)\n        });\n      }\n      else { // depois da primeira execução o setPyodide já rodou\n        const out = pyodide.runPython(script);\n        setOutput(out);\n      }\n  }, [props.code]);\n\n  return <p>{output}</p>;\n}\n\nexport default PyComp;",{"ruleId":"29","severity":1,"message":"30","line":5,"column":8,"nodeType":"31","messageId":"32","endLine":5,"endColumn":23},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"29","severity":1,"message":"37","line":2,"column":8,"nodeType":"31","messageId":"32","endLine":2,"endColumn":14},{"ruleId":"29","severity":1,"message":"38","line":3,"column":8,"nodeType":"31","messageId":"32","endLine":3,"endColumn":15},{"ruleId":"29","severity":1,"message":"39","line":4,"column":8,"nodeType":"31","messageId":"32","endLine":4,"endColumn":12},{"ruleId":"40","severity":1,"message":"41","line":14,"column":19,"nodeType":"42","endLine":29,"endColumn":4},{"ruleId":"40","severity":1,"message":"43","line":29,"column":6,"nodeType":"44","endLine":29,"endColumn":18,"suggestions":"45"},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["46"],"no-negated-in-lhs",["47"],"'script' is defined but never used.","'script2' is defined but never used.","'logo' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook React.useEffect has missing dependencies: 'props' and 'pyodide'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["48"],"no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: [props, props.code, pyodide]",{"range":"51","text":"52"},[809,821],"[props, props.code, pyodide]"]